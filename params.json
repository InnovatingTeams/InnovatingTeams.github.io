{"name":"Innovating Teams","tagline":"We build effective software teams","body":"### Build software well\r\n\r\nThe most effective way to build software today is:\r\n\r\n * **Work together** in teams. Share not just the planning but the actual work.\r\n * **Learn constantly** across the organization. Your productivity constraint is your rate of learning.\r\n * **Prove it** at every step. Never let a mistake linger.\r\n * **Refactor** everything. Reduce the cost of change to both your product and your process so you can adapt.\r\n * **Use data** to validate your learning. Run experiments to guide your changes.\r\n\r\nWorking this way:\r\n\r\n * Reduces **time to market**.\r\n * Reduces **cost of change** in market conditions.\r\n * Increases **productivity and efficiency** (work completed per dollar).\r\n * Increases **effectiveness** (value delivered per time).\r\n * Increases **customer satisfaction**.\r\n * Increases **team morale**.\r\n\r\nInnovating Teams helps you build teams that work in this way.\r\n\r\n### How teams get better\r\n\r\nWe have observed that teams tend to follow a standard progression, whether they receive outside coaching or not. Teams follow this same trajectory regardless of business domain or company size. Team-specific context changes only two things: the detailed practices they implement to achieve each step and how far they need to progress in order to succeed.\r\n\r\nThis happens because:\r\n\r\n * Everyone wants to be a **Lean Startup/Enterprise** using *validated learning* to direct their products and processes. that learning comes form **running experiments**. However,\r\n * Experiments require a **low cost of change**, a **low cost to revert**, and *extremely high quality**. That's because wins come from accumulating small gains. Each experiment will discover a subtle advantage for one option. High quality is required to be able to detect the subtle signals; low cost is required to allow us to run many experiments. However,\r\n * Current products have high cost of change and low quality: **technical debt**. But no team can afford to stop production and pay off technical debt. So they need to find a way to pay technical debt incrementally, without slowing down production or introducing bugs. They need to change their process. However,\r\n * The company suffers from **process debt**. Reporting structures, processes, meetings, and traditions all reinforce today's ways of working. It is hard to learn new approaches, expensive to agree on changes or run experiments, and difficult to tell if any given change had positive impact.\r\n\r\nTeams tend to start at the bottom and work their way back up this progression. They stop when either the environment doesn't let them progress further or their current way of working meets business needs.\r\n\r\nWe enhance the speed and ease at which you grow along this natural development trajectory. We can help with 5 phases of your ongoing transformation:\r\n\r\n # Create **learning teams**. Create high-performance teams that get better every day.\r\n # Get **legacy code** under control. Pay off technical debt incrementally, without spending productivity or introducing bugs.\r\n # **Ship at will**. Attain continuous delivery or whatever shipping cadence matches your market.\r\n # **Validated learning**. Plan based on data and change plans easily. Run experiments to deeply learn about your customers.\r\n # Create a **learning organization**. Create an innovation network from your learning teams that learns constantly and adapts to changing business circumstances.\r\n\r\n### Consulting\r\n\r\n**Arlo Belshee**, our Lean/Agile Coach and Team Craftsman, is available to help you transform your organization. He has 15 years of experience with Agile and Lean software development in companies ranging from 3 to 120,000 employees. he has helped dozens of organizations and work groups become high performance teams. If your team is willing to be the best&mdash;and put in the effort it takes to get there&mdash;Arlo can show you how.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}